# Unit 6, Lesson 11, Session 3, Slide 41

# Take a list and generate subset lists from it

def genSubsets(L):

    print( "function start" )                                             #debug .....
    print( "\t", "function called with list:", L )                        #debug .....
        
    # Base case of the recursion: when L is empty
    if len(L) == 0:
        print( "\t", "\t", "base case, ending function" )                 #debug .....        
        return [[]]


    # Recursion
    print( "\t", "\t", "re-calling function with list:", L[ :-1] )        #debug .....
    smaller = genSubsets( L[ :-1] )  
                                     
    # The rest of the program
    print( "--------------------" )                                       #debug .....
    print( "After recursive call to function" )                           #debug .....       
    print( "\t", "this corresponds to function called with list:", L )    #debug .....   
    
    extra = L[-1: ]  
    new = [] 
    print( "\t", "extra:", extra )                                        #debug .....
    print( "\t", "smaller (from next call):", smaller )                   #debug .....
    
    for small in smaller:
        print( "\t", "--------" )                                         #debug .....
        print( "\t", "inside loop" )                                      #debug .....
        print( "\t", "\t", "small:", small )                              #debug .....
        print( "\t", "\t", "new:", new )                                  #debug .....
        
        new.append(small+extra)
        print( "\t", "\t", "append (small+extra) to new:", new )          #debug .....
    
    print( "\t", "end of function, return smaller+new:", smaller+new )    #debug .....
    return smaller+new


# ..................................................................................................
# sample usage -------------------------------------------------------------------------------------

sample_list = [1,2]
genSubsets(sample_list)
